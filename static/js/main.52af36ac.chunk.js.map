{"version":3,"sources":["components/card/cardComponent.js","components/card-list/cardListComponent.js","components/search-box/searchBoxComponent.js","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","name","email","CardList","monsters","map","id","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mUAGaA,EAAO,SAAAC,GAChB,OAAO,sBAAKC,UAAU,iBAAf,UACH,qBAAKC,IAAI,UAAUC,IAAG,6EAEtB,6BAAKH,EAAMI,QAAQC,OACnB,4BAAIL,EAAMI,QAAQE,YCHbC,G,MAAW,SAACP,GAErB,OAAO,qBAAKC,UAAU,YAAf,SACFD,EAAMQ,SAASC,KAAI,SAACL,GAAD,OACpB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQM,WCNdC,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACpC,OACI,uBAAQZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,MCwCtEG,E,kDAtCb,aAAc,IAAD,8BACX,gBASFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SARnC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALN,E,qDAcb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,oBAK1C,WAAQ,MAE4BC,KAAKN,MAA/Bd,EAFF,EAEEA,SAAUW,EAFZ,EAEYA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA1B,GAAO,OAAIA,EAAQC,KAAK0B,cAAcC,SAASb,EAAYY,kBAEpG,OACE,sBAAK9B,UAAU,MAAf,UACE,kDACD,cAAC,EAAD,CAAWW,YAAY,kBAAkBC,aAAce,KAAKf,eAC3D,cAAC,EAAD,CAAUL,SAAUqB,W,GAjCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.52af36ac.chunk.js","sourcesContent":["import React from 'react';\r\nimport './cardComponent.css'\r\n\r\nexport const Card = props => {\r\n    return <div className='card-container'>\r\n        <img alt='monster' src={`https://robohash.org/$\r\n        {props.monster.id}?set=set2&size=180x180`} />\r\n        <h2>{props.monster.name}</h2>\r\n        <p>{props.monster.email}</p>\r\n</div>\r\n}","import React from 'react';\r\nimport { Card } from '../card/cardComponent';\r\nimport './cardList.css';\r\n\r\n\r\nexport const CardList = (props) => {\r\n\r\n    return <div className='card-list'>\r\n        {props.monsters.map((monster) => \r\n        <Card key={monster.id} monster={monster} />\r\n        )}\r\n        </div>\r\n\r\n}\r\n","import React from 'react';\r\nimport './searchBoxComponent.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => {\r\n    return (\r\n        <input  className='search' type='search' placeholder={placeholder} onChange={handleChange} />\r\n    )\r\n    \r\n}","import React, { Component } from 'react';\nimport './App.css';\nimport { CardList } from './components/card-list/cardListComponent';\nimport { SearchBox } from './components/search-box/searchBoxComponent'\n\nclass App extends Component {\n\n  constructor(){\n    super();\n\n      this.state = {\n        monsters: [],\n        searchField: '',\n      }\n      // this.handleChange = this.handleChange.bind(this)\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response=>response.json())\n    .then(users => this.setState({monsters: users}))\n  }\n  \n\n   \n  render(){\n    // destructuring\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => monster.name.toLowerCase().includes(searchField.toLowerCase()))\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n       <SearchBox placeholder='search monsters' handleChange={this.handleChange} />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}